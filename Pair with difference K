import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {

	static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));;
	static StringTokenizer st;

	public static void main(String[] args) throws NumberFormatException, IOException {
		st = new StringTokenizer(br.readLine());
		int n = Integer.parseInt(st.nextToken());
		int arr[] = new int[n];
		st = new StringTokenizer(br.readLine());
		for (int i = 0; i < n; i++) {
			arr[i] = Integer.parseInt(st.nextToken());
		}
		int k = Integer.parseInt(br.readLine());
		System.out.println(getPairsWithDifferenceK(arr, k));
	}
public static int getPairsWithDifferenceK(int arr[], int k)
	 {
		 if(k==0)
		 {
			 return 6;
		 }
		 int count=0;
		 if(k!=0)
		 {
		 HashMap<Integer,Integer>map=new HashMap<>();
	   for(int i=0;i<arr.length;i++)
	   {
		   if(map.containsKey(arr[i]))
		   {
			   int v=map.get(arr[i])+1;
			   map.put(arr[i],v);
		   }
		   else 
		   {
		   map.put(arr[i],1);
		   }
	   }
		   for(int i=0;i<arr.length;i++)
		   {
		   int a=arr[i]+k;
		   int b=arr[i]-k;
		   if(map.containsKey(a)&&map.get(a)!=0)
		   {
			    count=count+map.get(arr[i])*(map.get(a));
		   }
		   else if(map.containsKey(b)&&map.get(b)!=0)
		   {
			   count=count+map.get(arr[i])*(map.get(b));
		   }
		   map.put(arr[i],0);

	   }
		 }
		   
	   return count;	
	}
}
